Shader "Custom/URPTextOverlayShader"
{
    Properties
    {
        _MainTex ("Base (RGB)", 2D) = "white" {}
        _OverlayTex ("Overlay Texture", 2D) = "white" {}
        _Color ("Main Color", Color) = (1,1,1,1)
    }
    SubShader
    {
        Tags { "RenderType"="Transparent"; "Queue"="Overlay" }
        LOD 100

        Pass
        {
            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            struct Attributes
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct Varyings
            {
                float4 position : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            sampler2D _MainTex;
            sampler2D _OverlayTex;
            float4 _MainTex_ST;
            float4 _OverlayTex_ST;
            half4 _Color;

            Varyings vert (Attributes v)
            {
                Varyings o;
                o.position = TransformObjectToHClip(v.vertex);
                o.uv = TransformUV(v.uv, _MainTex_ST);
                return o;
            }

            half4 frag (Varyings i) : SV_Target
            {
                half4 baseColor = tex2D(_MainTex, i.uv) * _Color;
                half4 overlayColor = tex2D(_OverlayTex, i.uv);
                baseColor.a *= overlayColor.a;
                return baseColor;
            }
            ENDHLSL
        }
    }
    FallBack "Diffuse"
}
